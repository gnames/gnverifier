// Code generated by counterfeiter. DO NOT EDIT.
package verifiertesting

import (
	"context"
	"sync"

	verifiera "github.com/gnames/gnlib/ent/verifier"
	"github.com/gnames/gnquery/ent/search"
	"github.com/gnames/gnverifier/pkg/ent/verifier"
)

type FakeVerifier struct {
	DataSourceStub        func(context.Context, int) (verifiera.DataSource, error)
	dataSourceMutex       sync.RWMutex
	dataSourceArgsForCall []struct {
		arg1 context.Context
		arg2 int
	}
	dataSourceReturns struct {
		result1 verifiera.DataSource
		result2 error
	}
	dataSourceReturnsOnCall map[int]struct {
		result1 verifiera.DataSource
		result2 error
	}
	DataSourcesStub        func(context.Context) ([]verifiera.DataSource, error)
	dataSourcesMutex       sync.RWMutex
	dataSourcesArgsForCall []struct {
		arg1 context.Context
	}
	dataSourcesReturns struct {
		result1 []verifiera.DataSource
		result2 error
	}
	dataSourcesReturnsOnCall map[int]struct {
		result1 []verifiera.DataSource
		result2 error
	}
	NameStringStub        func(context.Context, verifiera.NameStringInput) (verifiera.NameStringOutput, error)
	nameStringMutex       sync.RWMutex
	nameStringArgsForCall []struct {
		arg1 context.Context
		arg2 verifiera.NameStringInput
	}
	nameStringReturns struct {
		result1 verifiera.NameStringOutput
		result2 error
	}
	nameStringReturnsOnCall map[int]struct {
		result1 verifiera.NameStringOutput
		result2 error
	}
	SearchStub        func(context.Context, search.Input) (search.Output, error)
	searchMutex       sync.RWMutex
	searchArgsForCall []struct {
		arg1 context.Context
		arg2 search.Input
	}
	searchReturns struct {
		result1 search.Output
		result2 error
	}
	searchReturnsOnCall map[int]struct {
		result1 search.Output
		result2 error
	}
	VerifyStub        func(context.Context, verifiera.Input) verifiera.Output
	verifyMutex       sync.RWMutex
	verifyArgsForCall []struct {
		arg1 context.Context
		arg2 verifiera.Input
	}
	verifyReturns struct {
		result1 verifiera.Output
	}
	verifyReturnsOnCall map[int]struct {
		result1 verifiera.Output
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeVerifier) DataSource(arg1 context.Context, arg2 int) (verifiera.DataSource, error) {
	fake.dataSourceMutex.Lock()
	ret, specificReturn := fake.dataSourceReturnsOnCall[len(fake.dataSourceArgsForCall)]
	fake.dataSourceArgsForCall = append(fake.dataSourceArgsForCall, struct {
		arg1 context.Context
		arg2 int
	}{arg1, arg2})
	stub := fake.DataSourceStub
	fakeReturns := fake.dataSourceReturns
	fake.recordInvocation("DataSource", []interface{}{arg1, arg2})
	fake.dataSourceMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) DataSourceCallCount() int {
	fake.dataSourceMutex.RLock()
	defer fake.dataSourceMutex.RUnlock()
	return len(fake.dataSourceArgsForCall)
}

func (fake *FakeVerifier) DataSourceCalls(stub func(context.Context, int) (verifiera.DataSource, error)) {
	fake.dataSourceMutex.Lock()
	defer fake.dataSourceMutex.Unlock()
	fake.DataSourceStub = stub
}

func (fake *FakeVerifier) DataSourceArgsForCall(i int) (context.Context, int) {
	fake.dataSourceMutex.RLock()
	defer fake.dataSourceMutex.RUnlock()
	argsForCall := fake.dataSourceArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVerifier) DataSourceReturns(result1 verifiera.DataSource, result2 error) {
	fake.dataSourceMutex.Lock()
	defer fake.dataSourceMutex.Unlock()
	fake.DataSourceStub = nil
	fake.dataSourceReturns = struct {
		result1 verifiera.DataSource
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) DataSourceReturnsOnCall(i int, result1 verifiera.DataSource, result2 error) {
	fake.dataSourceMutex.Lock()
	defer fake.dataSourceMutex.Unlock()
	fake.DataSourceStub = nil
	if fake.dataSourceReturnsOnCall == nil {
		fake.dataSourceReturnsOnCall = make(map[int]struct {
			result1 verifiera.DataSource
			result2 error
		})
	}
	fake.dataSourceReturnsOnCall[i] = struct {
		result1 verifiera.DataSource
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) DataSources(arg1 context.Context) ([]verifiera.DataSource, error) {
	fake.dataSourcesMutex.Lock()
	ret, specificReturn := fake.dataSourcesReturnsOnCall[len(fake.dataSourcesArgsForCall)]
	fake.dataSourcesArgsForCall = append(fake.dataSourcesArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.DataSourcesStub
	fakeReturns := fake.dataSourcesReturns
	fake.recordInvocation("DataSources", []interface{}{arg1})
	fake.dataSourcesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) DataSourcesCallCount() int {
	fake.dataSourcesMutex.RLock()
	defer fake.dataSourcesMutex.RUnlock()
	return len(fake.dataSourcesArgsForCall)
}

func (fake *FakeVerifier) DataSourcesCalls(stub func(context.Context) ([]verifiera.DataSource, error)) {
	fake.dataSourcesMutex.Lock()
	defer fake.dataSourcesMutex.Unlock()
	fake.DataSourcesStub = stub
}

func (fake *FakeVerifier) DataSourcesArgsForCall(i int) context.Context {
	fake.dataSourcesMutex.RLock()
	defer fake.dataSourcesMutex.RUnlock()
	argsForCall := fake.dataSourcesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeVerifier) DataSourcesReturns(result1 []verifiera.DataSource, result2 error) {
	fake.dataSourcesMutex.Lock()
	defer fake.dataSourcesMutex.Unlock()
	fake.DataSourcesStub = nil
	fake.dataSourcesReturns = struct {
		result1 []verifiera.DataSource
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) DataSourcesReturnsOnCall(i int, result1 []verifiera.DataSource, result2 error) {
	fake.dataSourcesMutex.Lock()
	defer fake.dataSourcesMutex.Unlock()
	fake.DataSourcesStub = nil
	if fake.dataSourcesReturnsOnCall == nil {
		fake.dataSourcesReturnsOnCall = make(map[int]struct {
			result1 []verifiera.DataSource
			result2 error
		})
	}
	fake.dataSourcesReturnsOnCall[i] = struct {
		result1 []verifiera.DataSource
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) NameString(arg1 context.Context, arg2 verifiera.NameStringInput) (verifiera.NameStringOutput, error) {
	fake.nameStringMutex.Lock()
	ret, specificReturn := fake.nameStringReturnsOnCall[len(fake.nameStringArgsForCall)]
	fake.nameStringArgsForCall = append(fake.nameStringArgsForCall, struct {
		arg1 context.Context
		arg2 verifiera.NameStringInput
	}{arg1, arg2})
	stub := fake.NameStringStub
	fakeReturns := fake.nameStringReturns
	fake.recordInvocation("NameString", []interface{}{arg1, arg2})
	fake.nameStringMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) NameStringCallCount() int {
	fake.nameStringMutex.RLock()
	defer fake.nameStringMutex.RUnlock()
	return len(fake.nameStringArgsForCall)
}

func (fake *FakeVerifier) NameStringCalls(stub func(context.Context, verifiera.NameStringInput) (verifiera.NameStringOutput, error)) {
	fake.nameStringMutex.Lock()
	defer fake.nameStringMutex.Unlock()
	fake.NameStringStub = stub
}

func (fake *FakeVerifier) NameStringArgsForCall(i int) (context.Context, verifiera.NameStringInput) {
	fake.nameStringMutex.RLock()
	defer fake.nameStringMutex.RUnlock()
	argsForCall := fake.nameStringArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVerifier) NameStringReturns(result1 verifiera.NameStringOutput, result2 error) {
	fake.nameStringMutex.Lock()
	defer fake.nameStringMutex.Unlock()
	fake.NameStringStub = nil
	fake.nameStringReturns = struct {
		result1 verifiera.NameStringOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) NameStringReturnsOnCall(i int, result1 verifiera.NameStringOutput, result2 error) {
	fake.nameStringMutex.Lock()
	defer fake.nameStringMutex.Unlock()
	fake.NameStringStub = nil
	if fake.nameStringReturnsOnCall == nil {
		fake.nameStringReturnsOnCall = make(map[int]struct {
			result1 verifiera.NameStringOutput
			result2 error
		})
	}
	fake.nameStringReturnsOnCall[i] = struct {
		result1 verifiera.NameStringOutput
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) Search(arg1 context.Context, arg2 search.Input) (search.Output, error) {
	fake.searchMutex.Lock()
	ret, specificReturn := fake.searchReturnsOnCall[len(fake.searchArgsForCall)]
	fake.searchArgsForCall = append(fake.searchArgsForCall, struct {
		arg1 context.Context
		arg2 search.Input
	}{arg1, arg2})
	stub := fake.SearchStub
	fakeReturns := fake.searchReturns
	fake.recordInvocation("Search", []interface{}{arg1, arg2})
	fake.searchMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeVerifier) SearchCallCount() int {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	return len(fake.searchArgsForCall)
}

func (fake *FakeVerifier) SearchCalls(stub func(context.Context, search.Input) (search.Output, error)) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = stub
}

func (fake *FakeVerifier) SearchArgsForCall(i int) (context.Context, search.Input) {
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	argsForCall := fake.searchArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVerifier) SearchReturns(result1 search.Output, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	fake.searchReturns = struct {
		result1 search.Output
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) SearchReturnsOnCall(i int, result1 search.Output, result2 error) {
	fake.searchMutex.Lock()
	defer fake.searchMutex.Unlock()
	fake.SearchStub = nil
	if fake.searchReturnsOnCall == nil {
		fake.searchReturnsOnCall = make(map[int]struct {
			result1 search.Output
			result2 error
		})
	}
	fake.searchReturnsOnCall[i] = struct {
		result1 search.Output
		result2 error
	}{result1, result2}
}

func (fake *FakeVerifier) Verify(arg1 context.Context, arg2 verifiera.Input) verifiera.Output {
	fake.verifyMutex.Lock()
	ret, specificReturn := fake.verifyReturnsOnCall[len(fake.verifyArgsForCall)]
	fake.verifyArgsForCall = append(fake.verifyArgsForCall, struct {
		arg1 context.Context
		arg2 verifiera.Input
	}{arg1, arg2})
	stub := fake.VerifyStub
	fakeReturns := fake.verifyReturns
	fake.recordInvocation("Verify", []interface{}{arg1, arg2})
	fake.verifyMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeVerifier) VerifyCallCount() int {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	return len(fake.verifyArgsForCall)
}

func (fake *FakeVerifier) VerifyCalls(stub func(context.Context, verifiera.Input) verifiera.Output) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = stub
}

func (fake *FakeVerifier) VerifyArgsForCall(i int) (context.Context, verifiera.Input) {
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	argsForCall := fake.verifyArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeVerifier) VerifyReturns(result1 verifiera.Output) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	fake.verifyReturns = struct {
		result1 verifiera.Output
	}{result1}
}

func (fake *FakeVerifier) VerifyReturnsOnCall(i int, result1 verifiera.Output) {
	fake.verifyMutex.Lock()
	defer fake.verifyMutex.Unlock()
	fake.VerifyStub = nil
	if fake.verifyReturnsOnCall == nil {
		fake.verifyReturnsOnCall = make(map[int]struct {
			result1 verifiera.Output
		})
	}
	fake.verifyReturnsOnCall[i] = struct {
		result1 verifiera.Output
	}{result1}
}

func (fake *FakeVerifier) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.dataSourceMutex.RLock()
	defer fake.dataSourceMutex.RUnlock()
	fake.dataSourcesMutex.RLock()
	defer fake.dataSourcesMutex.RUnlock()
	fake.nameStringMutex.RLock()
	defer fake.nameStringMutex.RUnlock()
	fake.searchMutex.RLock()
	defer fake.searchMutex.RUnlock()
	fake.verifyMutex.RLock()
	defer fake.verifyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeVerifier) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ verifier.Verifier = new(FakeVerifier)
